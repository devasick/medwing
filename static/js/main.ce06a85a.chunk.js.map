{"version":3,"sources":["Components/Listmap.js","Components/Autocomplete.js","Components/Addmap.js","Components/Editmap.js","Components/Deletemap.js","Components/GoogleMap.js","App.js","serviceWorker.js","index.js"],"names":["Listmap","props","state","error","isLoaded","items","fetch","then","res","json","result","setState","this","to","Button","variant","map","item","i","key","className","location_name","googlelat","googlellng","m_id","Component","google","window","React","Addmap","place","initialState","handlePlaceSelect","bind","handleChange","handleSubmit","autocomplete","maps","places","Autocomplete","document","getElementById","componentRestrictions","country","types","addListener","name","id","event","target","value","preventDefault","console","log","history","axios","method","url","data","config","headers","response","push","catch","addressObject","getPlace","lat","geometry","location","lng","address_components","Col","sm","md","onSubmit","Form","Group","Control","type","placeholder","ref","Text","readOnly","onChange","Editmap","get","match","params","g_id","Deletemap","MapContainer","displayMarkers","stores","store","index","position","onClick","fetchMap","zoom","style","width","height","initialCenter","GoogleApiWrapper","apiKey","MedWing","Fragment","Container","Row","basename","exact","path","component","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAKqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALM,E,iFAWI,IAAD,OAClBC,MAAM,6CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVC,MAAOK,OAMX,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,e,+BAMF,IAAD,EAC8BS,KAAKV,MAAfG,GADpB,EACGF,MADH,EACUC,SADV,EACoBC,OAEzB,OACI,6BACC,kBAAC,IAAD,CAAMQ,GAAG,QACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,YAED,6BACCV,EAAMW,KAAI,SAAUC,EAAMC,GAChC,OAAO,yBAAKC,IAAKD,EAAGE,UAAU,uBACjC,4BAAKH,EAAKI,eACV,wCAAcJ,EAAKK,WACP,yCAAeL,EAAKM,YACpB,8BAAM,kBAAC,IAAD,CAAMV,GAAI,SAASI,EAAKO,KAAMJ,UAAU,OAAxC,SACN,0BAAMA,UAAU,iBAAgB,kBAAC,IAAD,CAAMP,GAAI,WAAWI,EAAKO,KAAMJ,UAAU,OAA1C,oB,GAjDXK,a,yBCJ/BC,EAASC,OAAOD,O,GAEKE,IAAMH,U,gBCE3BC,EAASC,OAAOD,OAMDG,E,YACjB,WAAY5B,GAAQ,IAAD,8BACf,4CAAMA,KAqFVC,MAAQ,CACJ4B,MAAO,IArFP,EAAK5B,MAAQ,EAAK6B,eAClB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,KANL,E,iFAefxB,KAAKwB,aAAe,IAAIV,EAAOW,KAAKC,OAAOC,aAAaC,SAASC,eAAe,gBALlE,CAEVC,sBAAuB,CAACC,QAAS,OAGoE,CAACC,MAAO,CAAC,mBAElHhC,KAAKwB,aAAaS,YAAY,gBAAiBjC,KAAKoB,qB,qCAIpD,MAAO,CACLc,KAAM,GACNC,GAAG,GACHzB,UAAU,GACVC,WAAW,M,mCAKFyB,GACXpC,KAAKD,SAAL,eAAgBqC,EAAMC,OAAOH,KAAOE,EAAMC,OAAOC,U,mCAGtCF,GACXA,EAAMG,iBACNC,QAAQC,IAAIzC,KAAKV,OAFC,IAGVoD,EAAY1C,KAAKX,MAAjBqD,QAURC,IAAM,CACFC,OAAQ,OACRC,IAAK,0CACLC,KAAM9C,KAAKV,MACXyD,OAAQ,CAAEC,QAXG,CACb,8BAA+B,IAC/B,OAAU,mBACV,eAAgB,uBAUnBrD,MAAK,SAAUsD,GAEZP,EAAQQ,KAAK,KAEZV,QAAQC,IAAIQ,MAGhBE,OAAM,SAAUF,GAEbT,QAAQC,IAAIQ,Q,0CAKhB,IAAIG,EAAgBpD,KAAKwB,aAAa6B,WAClCC,EAAMF,EAAcG,SAASC,SAASF,MAC1CG,EAAML,EAAcG,SAASC,SAASC,MACxBL,EAAcM,mBAC5BlB,QAAQC,IAAIW,GAGZpD,KAAKD,SAAS,CACZmC,KAAMkB,EAAclB,KACpBC,GAAIiB,EAAcjB,GAClBzB,UAAW4C,EACX3C,WAAY8C,M,uCAaCvC,GACflB,KAAKD,SAAS,CAAEmB,Y,+BAmChB,OACI,kBAACyC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,IACb,wBAAIrD,UAAU,kBAAd,oBACA,0BAAMsD,SAAU9D,KAAKuB,cACrB,kBAACwC,EAAA,EAAKC,MAAN,KACH,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAAgBhC,GAAG,eAAeiC,IAAI,UACxE,kBAACL,EAAA,EAAKM,KAAN,CAAW7D,UAAU,cAArB,wCAKL,kBAACuD,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAAgBG,UAAQ,EAACpC,KAAM,OAAQI,MAAOtC,KAAKV,MAAM4C,KAC7FqC,SAAUvE,KAAKsB,gBAElB,kBAACyC,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWG,UAAQ,EAACpC,KAAM,MAAOI,MAAOtC,KAAKV,MAAMoB,UACvF6D,SAAUvE,KAAKsB,gBAElB,kBAACyC,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOI,UAAQ,EAACH,YAAY,YAAYjC,KAAM,MAAOI,MAAOtC,KAAKV,MAAMqB,WACxF4D,SAAUvE,KAAKsB,gBAKlB,4BAAQwC,SAAU9D,KAAKuB,aAAcf,UAAU,UAA/C,gB,GA1JwBK,aCN9BC,EAASC,OAAOD,OAMD0D,E,YACjB,WAAYnF,GAAQ,IAAD,8BACf,4CAAMA,KAuGVC,MAAQ,CACJ4B,MAAO,IAvGP,EAAK5B,MAAQ,EAAK6B,eAClB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,KANL,E,iFAUI,IAAD,OAMlBxB,KAAKwB,aAAe,IAAIV,EAAOW,KAAKC,OAAOC,aAAaC,SAASC,eAAe,gBALlE,CAEVC,sBAAuB,CAACC,QAAS,OAGoE,CAACC,MAAO,CAAC,mBAElHhC,KAAKwB,aAAaS,YAAY,gBAAiBjC,KAAKoB,mBAEpDuB,IAAM8B,IAAI,2CAA2CzE,KAAKX,MAAMqF,MAAMC,OAAOxC,IACxExC,MAAK,SAAAsD,GACF,EAAKlD,SAAS,CAEZa,KAAMqC,EAASH,KAAK,GAAGlC,KACvBsB,KAAMe,EAASH,KAAK,GAAGrC,cACvBmE,KAAM3B,EAASH,KAAK,GAAG8B,KACvBlE,UAAWuC,EAASH,KAAK,GAAGpC,UAC5BC,WAAYsC,EAASH,KAAK,GAAGnC,WAC7BnB,UAAU,IAGZgD,QAAQC,IAAIQ,EAASH,KAAK,GAAGrC,kBAEhC0C,OAAM,SAAU5D,GACbiD,QAAQC,IAAIlD,Q,qCAKpB,MAAO,CACL2C,KAAM,GACNC,GAAG,GACHzB,UAAU,GACVC,WAAW,M,mCAKFyB,GACXpC,KAAKD,SAAL,eAAgBqC,EAAMC,OAAOH,KAAOE,EAAMC,OAAOC,U,mCAGtCF,GACXA,EAAMG,iBACNC,QAAQC,IAAIzC,KAAKV,OAFC,IAGVoD,EAAY1C,KAAKX,MAAjBqD,QAURC,IAAM,CACFC,OAAQ,OACRC,IAAK,6CACLC,KAAM9C,KAAKV,MACXyD,OAAQ,CAAEC,QAXG,CACb,8BAA+B,IAC/B,OAAU,mBACV,eAAgB,uBAUnBrD,MAAK,SAAUsD,GAEbP,EAAQQ,KAAK,QAIfC,OAAM,SAAUF,GAEbT,QAAQC,IAAIQ,Q,0CAKhB,IAAIG,EAAgBpD,KAAKwB,aAAa6B,WAClCC,EAAMF,EAAcG,SAASC,SAASF,MAC1CG,EAAML,EAAcG,SAASC,SAASC,MACxBL,EAAcM,mBAC5BlB,QAAQC,IAAIW,GAGZpD,KAAKD,SAAS,CACZmC,KAAMkB,EAAclB,KACpBC,GAAIiB,EAAcjB,GAClBzB,UAAW4C,EACX3C,WAAY8C,M,uCAaCvC,GACflB,KAAKD,SAAS,CAAEmB,Y,+BAOV,IAAD,EAG8BlB,KAAKV,MAHnC,EAGGC,MAHH,EAGUC,SAHV,EAGoBC,MAIzB,OAHA+C,QAAQC,IAAIzC,KAAKV,OAIb,kBAACqE,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,IACb,wBAAIrD,UAAU,kBAAd,qBACA,0BAAMsD,SAAU9D,KAAKuB,cACrB,kBAACwC,EAAA,EAAKC,MAAN,KACH,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOC,YAAY,oBAAoBhC,GAAG,eAAeiC,IAAI,UAC5E,kBAACL,EAAA,EAAKM,KAAN,CAAW7D,UAAU,cAArB,oCAKL,kBAACuD,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOI,UAAQ,EAACpC,KAAM,OAAQI,MAAOtC,KAAKV,MAAM4C,KACjEqC,SAAUvE,KAAKsB,gBAElB,kBAACyC,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOI,UAAQ,EAACpC,KAAM,MAAOI,MAAOtC,KAAKV,MAAMoB,UAChE6D,SAAUvE,KAAKsB,gBAElB,kBAACyC,EAAA,EAAKC,MAAN,KACC,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,OAAOI,UAAQ,EAACpC,KAAM,MAAOI,MAAOtC,KAAKV,MAAMqB,WAChE4D,SAAUvE,KAAKsB,gBAKlB,4BAAQwC,SAAU9D,KAAKuB,aAAcf,UAAU,WAA/C,gB,GAvJyBK,aCThBgE,E,YAEjB,WAAYxF,GAAQ,qEAChBA,I,iFAEiB,IAAD,OACpBsD,IAAM8B,IAAI,gCAAgCzE,KAAKX,MAAMqF,MAAMC,OAAOxC,IACzDxC,MAAK,SAAAsD,GACF,EAAKlD,SAAS,IAEd,EAAKV,MAAMqD,QAAQQ,KAAK,KACxBV,QAAQC,IAAIQ,MAEfE,OAAM,SAAU5D,GACbiD,QAAQC,IAAIlD,Q,+BAIpB,OACI,kC,GAnB2BsB,a,iCCG1BiE,EAAb,YAEI,WAAYzF,GAAQ,IAAD,8BACjB,4CAAMA,KAmDR0F,eAAiB,WAKb,OAAO,EAAKzF,MAAM0F,OAAO5E,KAAI,SAAC6E,EAAOC,GACnC,OAAO,kBAAC,SAAD,CAAQ3E,IAAK2E,EAAO/C,GAAI+C,EAAOC,SAAU,CAC/C7B,IAAK2B,EAAMvE,UACX+C,IAAKwB,EAAMtE,YAEbyE,QAAS,kBAAM5C,QAAQC,IAAI,0BA5D9B,EAAKnD,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVwF,OAAQ,IALO,EAFvB,wEAagB,IAAD,OAEP,OACAtF,MAAM,0CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAEhBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVwF,OAAQlF,OASZ,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,eAnChB,oJA+CwBS,KAAKqF,WACLrF,KAAK+E,iBAhD7B,qIA+EM,OAEI,kBAAC,MAAD,CACEjE,OAAQd,KAAKX,MAAMyB,OACnBwE,KAAM,EACNC,MATc,CACdC,MAAO,OACPC,OAAQ,SAQRC,cAAe,CAAEpC,IAAK,QAASG,IAAK,UAEnCzD,KAAK+E,sBAvFlB,GAAkClE,aA6FjB8E,6BAAiB,CAC9BC,OAAQ,qDADKD,CAEZb,GCpDUe,E,iLA7BX,OAEC,kBAAC,IAAMC,SAAP,KACD,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAEjB,kBAAC,EAAD,OAEA,kBAACF,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAEf,kBAAC,IAAD,CAAQoC,SAAS,mBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhH,IACjC,kBAAC,IAAD,CAAO+G,KAAK,OAAOC,UAAWnF,IAC9B,kBAAC,IAAD,CAAOkF,KAAK,YAAYC,UAAW5B,IACnC,kBAAC,IAAD,CAAO2B,KAAK,cAAcC,UAAWvB,c,GAnB3BhE,aCJFwF,QACW,cAA7BtF,OAAOyC,SAAS8C,UAEe,UAA7BvF,OAAOyC,SAAS8C,UAEhBvF,OAAOyC,SAAS8C,SAAS5B,MACvB,2DCXN6B,IAASC,OAAO,kBAAC,EAAD,MAAS5E,SAASC,eAAe,SD0H3C,kBAAmB4E,WACrBA,UAAUC,cAAcC,MAAMhH,MAAK,SAAAiH,GACjCA,EAAaC,iB","file":"static/js/main.ce06a85a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { Button,Form } from 'react-bootstrap';\n\n\nexport default class Listmap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: []\n        };\n      }\n\n      \n    \n      componentDidMount() {\n        fetch(\"http://asickweb.com/react/api/?fetch=data\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                isLoaded: true,\n                items: result\n              });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n      }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n       // console.log(items)\n        return (\n            <div>\n             <Link to=\"/add\"> \n             <Button variant=\"primary\">Add Map</Button>\n            </Link>\n            <hr></hr>\n            {items.map(function (item, i) { \n\t\t\t    return <div key={i} className=\"d-inline-block w-50\">\n\t\t\t\t<h5>{item.location_name}</h5>\n\t\t\t\t<p>Latitude: {item.googlelat}</p>\n                <p>Longitude: {item.googlellng}</p>\n                <span><Link to={\"/edit/\"+item.m_id} className=\"btn\">Edit</Link></span>\n                <span className=\"ml-2 text-red\"><Link to={\"/delete/\"+item.m_id} className=\"btn\">Delete</Link></span>\n \t\t\t\t</div>\n\t\t\t  })}\n\n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nconst google = window.google\n\nclass Autocomplete extends React.Component {\n\n\n\n  constructor(props) {\n    super(props);\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  }\n\n  componentDidMount() {\n    var options = {\n        //types: ['(cities)'],\n        componentRestrictions: {country: \"de\"}\n       };\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.autocompleteInput.current,\n       options,\n      { types: [\"establishment\"] }\n    );\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceChanged);\n  }\n\n  handlePlaceChanged() {\n    const place = this.autocomplete.getPlace();\n    this.props.onPlaceChanged(place);\n  }\n\n  render() {\n    return (\n      <input\n        ref={this.autocompleteInput}\n        id=\"autocomplete\"\n        placeholder=\"Enter your address\"\n        type=\"text\"\n      />\n    );\n  }\n}\n\nexport default Autocomplete;","import React, { Component } from 'react'\nimport { Button,Form,Col } from 'react-bootstrap';\nimport Autocomplete from \"./Autocomplete\";\nimport axios from 'axios';\nconst API_PATH = 'http://asickweb.com/react/api/';\nconst google = window.google;\n \n\n\n \n\nexport default class Addmap extends Component {\n    constructor(props) {\n        super(props)\n        this.state = this.initialState()\n        this.handlePlaceSelect = this.handlePlaceSelect.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.autocomplete = null\n      }\n    \n      componentDidMount() {\n        var options = {\n            //types: ['(cities)'],\n            componentRestrictions: {country: \"de\"}\n           };\n    \n        this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'),options ,{types: [\"establishment\"]})\n    \n        this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect)\n      }\n    \n      initialState() {\n        return {\n          name: '',\n          id:'', \n          googlelat:'',\n          googlellng:'',\n        \n        }\n      }\n    \n      handleChange(event) {\n        this.setState({[event.target.name]: event.target.value})\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault()\n        console.log(this.state);\n        const { history } = this.props;\n\n        //this.props.dispatch(this.state)\n        var headersvar = {\n            'Access-Control-Allow-Origin': '*',        \n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    \n\n        axios({\n            method: 'post',\n            url: 'http://asickweb.com/react/api/?add=data',\n            data: this.state,\n            config: { headers:headersvar}\n        })\n        .then(function (response) {\n \n            history.push('/');\n\n             console.log(response)\n\n        })\n        .catch(function (response) {\n            //handle error\n            console.log(response)\n        });\n      }\n    \n      handlePlaceSelect() {\n        let addressObject = this.autocomplete.getPlace();\n        var lat = addressObject.geometry.location.lat(),\n        lng = addressObject.geometry.location.lng();\n        let address = addressObject.address_components\n        console.log(addressObject)\n         \n       \n        this.setState({\n          name: addressObject.name,\n          id: addressObject.id,\n          googlelat: lat,\n          googlellng: lng,\n           \n           \n        })\n      }\n    \n    \n\n    state = {\n        place: {},\n        };\n    \n    \n      showPlaceDetails(place) {\n        this.setState({ place });\n      }\n\n\n      /*handleFormSubmit = e => {\n        e.preventDefault();\n            this.props.dispatch(addParlor(this.state))\n\n        axios({\n          method: 'post',\n          url: `${API_PATH}`,\n          headers: { 'content-type': 'application/json' },\n          data: this.state\n        })\n          .then(result => {\n            this.setState({\n              mailSent: result.data.sent\n            })\n          })\n          .catch(error => this.setState({ error: error.message }));\n      }; */\n      \n     \n\n    render() {\n        const AddressDetails = props => {\n \n            return (\n                 <div>\n                  <pre>{JSON.stringify(props.place, null, 2)}</pre>\n                 </div>\n            )\n          };\n\n\n        return (\n            <Col sm={12} md={12}>\n                <h5 className=\"text-uppercase\">Add Map Location</h5>\n                <form onSubmit={this.handleSubmit}>\n                <Form.Group>\n             <Form.Control type=\"text\" placeholder=\"Enter Address\" id=\"autocomplete\" ref=\"input\"/>\n                 <Form.Text className=\"text-muted\">\n                 Google Map autocomplete will appear\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group>\n             <Form.Control type=\"text\" placeholder=\"Location Name\" readOnly name={\"name\"} value={this.state.name}\n               onChange={this.handleChange}/>\n            </Form.Group>\n            <Form.Group>\n             <Form.Control type=\"text\" placeholder=\"Latitude\" readOnly name={\"lat\"} value={this.state.googlelat}\n               onChange={this.handleChange}/>\n            </Form.Group>\n            <Form.Group>\n             <Form.Control type=\"text\" readOnly placeholder=\"Longitude\" name={\"lng\"} value={this.state.googlellng}\n               onChange={this.handleChange}/>\n            </Form.Group>\n           \n            \n          \n            <button onSubmit={this.handleSubmit} className=\"button\">Submit</button>\n        </form>\n\n            </Col>\n        )\n    }\n}\n\n ","import React, { Component } from 'react'\nimport { Button,Form,Col } from 'react-bootstrap';\nimport Autocomplete from \"./Autocomplete\";\nimport axios from 'axios';\nconst API_PATH = 'http://asickweb.com/react/api/';\nconst google = window.google;\n \n\n\n \n\nexport default class Editmap extends Component {\n    constructor(props) {\n        super(props)\n        this.state = this.initialState()\n        this.handlePlaceSelect = this.handlePlaceSelect.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.autocomplete = null;\n        \n      }\n    \n      componentDidMount() {\n        var options = {\n            //types: ['(cities)'],\n            componentRestrictions: {country: \"de\"}\n           };\n    \n        this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'),options ,{types: [\"establishment\"]})\n    \n        this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect);\n\n        axios.get('http://asickweb.com/react/api/?editdata='+this.props.match.params.id)\n            .then(response => {\n                this.setState({ \n                 //   console.log(response),\n                  m_id: response.data[0].m_id, \n                  name: response.data[0].location_name, \n                  g_id: response.data[0].g_id,\n                  googlelat: response.data[0].googlelat,\n                  googlellng: response.data[0].googlellng,\n                  isLoaded: true, \n                  \n                });\n                console.log(response.data[0].location_name);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n      }\n    \n      initialState() {\n        return {\n          name: '',\n          id:'', \n          googlelat:'',\n          googlellng:'',\n        \n        }\n      }\n    \n      handleChange(event) {\n        this.setState({[event.target.name]: event.target.value})\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault()\n        console.log(this.state);\n        const { history } = this.props;\n\n        //this.props.dispatch(this.state)\n        var headersvar = {\n            'Access-Control-Allow-Origin': '*',        \n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    \n\n        axios({\n            method: 'post',\n            url: 'http://asickweb.com/react/api/?update=data', \n            data: this.state,\n            config: { headers:headersvar}\n        })\n        .then(function (response) {\n \n           history.push('/');\n\n\n        })\n        .catch(function (response) {\n            //handle error\n            console.log(response)\n        });\n      }\n    \n      handlePlaceSelect() {\n        let addressObject = this.autocomplete.getPlace();\n        var lat = addressObject.geometry.location.lat(),\n        lng = addressObject.geometry.location.lng();\n        let address = addressObject.address_components\n        console.log(addressObject)\n         \n       \n        this.setState({\n          name: addressObject.name,\n          id: addressObject.id,\n          googlelat: lat,\n          googlellng: lng,\n           \n           \n        })\n      }\n    \n    \n\n    state = {\n        place: {},\n        };\n    \n    \n      showPlaceDetails(place) {\n        this.setState({ place });\n      }\n\n \n      \n     \n\n    render() {\n\n\n        const { error, isLoaded, items } = this.state;\n        console.log(this.state);\n\n\n        return (\n            <Col sm={12} md={12}>\n                <h5 className=\"text-uppercase\">Edit Map Location</h5>\n                <form onSubmit={this.handleSubmit}>\n                <Form.Group>\n             <Form.Control type=\"text\" placeholder=\"Enter New Address\" id=\"autocomplete\" ref=\"input\"/>\n                 <Form.Text className=\"text-muted\">\n                 Google autocomplete will appear\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group>\n             <Form.Control type=\"text\" readOnly name={\"name\"} value={this.state.name}\n               onChange={this.handleChange}/>\n            </Form.Group>\n            <Form.Group>\n             <Form.Control type=\"text\" readOnly name={\"lat\"} value={this.state.googlelat}\n               onChange={this.handleChange}/>\n            </Form.Group>\n            <Form.Group>\n             <Form.Control type=\"text\" readOnly name={\"lng\"} value={this.state.googlellng}\n               onChange={this.handleChange}/>\n            </Form.Group>\n           \n            \n          \n            <button onSubmit={this.handleSubmit} className=\"primary\">Update</button>\n        </form>\n\n            </Col>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\nexport default class Deletemap extends Component {\n\n    constructor(props) {\n\t\tsuper(props);\n    }\n    componentDidMount() {\n    axios.get('http://localhost/api/?delete='+this.props.match.params.id)\n            .then(response => {\n                this.setState({ \n                });\n                this.props.history.push('/');\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n      }\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n\n \n","import React, { Component, createRef } from 'react'\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\n\n \nexport class MapContainer extends Component {\n    \n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: true,\n        stores: []\n      };\n      \n       \n    }\n\n    fetchMap() {\n        // Where we're fetching data from\n        return(\n        fetch(\"http://localhost/api/?marker_data=data\")\n          .then(res => res.json())\n          \n          .then(\n            (result) => {\n              this.setState({\n                isLoaded: true,\n                stores: result\n              });\n              \n               \n            },\n             \n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n          \n        ) // return\n\n        \n      }\n\n      async componentDidMount() {\n\n        var GoogleMap = this.fetchMap();\n        var markerfun = this.displayMarkers();\n\n      }\n  \n \n\n    displayMarkers = () => {\n       //var test = this.state.items\n       //this.setState({stores: this.state.items});\n\n       //console.log(this.state.stores)\n        return this.state.stores.map((store, index) => {\n          return <Marker key={index} id={index} position={{\n           lat: store.googlelat,\n           lng: store.googlellng\n         }}\n         onClick={() => console.log(\"You clicked me!\")} />\n        })\n      }\n    \n\n    \n    \n  \n    render() {\n        \n        \n        const mapStyles = {\n            width: '100%',\n            height: '600px',\n          }; \n      return (\n         \n          <Map\n            google={this.props.google}\n            zoom={5}\n            style={mapStyles}\n            initialCenter={{ lat: 51.1657, lng: 10.4515}}\n          >\n            {this.displayMarkers()}\n          </Map>\n      );\n    }\n  }\n\n  export default GoogleApiWrapper({\n    apiKey: 'AIzaSyDRCcfJVtzzqsrmB5NpU2pytpTEjNlUDUk&libraries'\n  })(MapContainer);\n","import React,{Component} from 'react';\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\nimport { Button,Container,Col,Row } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'; \n\nimport Listmap from './Components/Listmap';  \nimport Addmap from './Components/Addmap'; \nimport Editmap from './Components/Editmap';\nimport Deletemap from './Components/Deletemap';\nimport GoogleMap from './Components/GoogleMap';\n \n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\n\nclass MedWing extends Component {\n \n  render() {\n    return (\n      \n     <React.Fragment>\n    <Container>\n    <Row>\n      <Col sm={12} md={6}>\n              {/* Map   */}\n      <GoogleMap/>\n      </Col>\n      <Col sm={12} md={6}>\n      {/* Router  */}\n        <Router basename='/react/medwing/'>\n          <Switch>\n            <Route exact path=\"/\" component={Listmap} />\n            <Route path=\"/add\" component={Addmap} />\n            <Route path=\"/edit/:id\" component={Editmap} />\n            <Route path=\"/delete/:id\" component={Deletemap} />\n          </Switch>\n      </Router>\n      {/* Router  */}\n    </Col>\n    </Row>\n   \n    </Container>\n    </React.Fragment>\n    );\n  }\n}\n \nexport default MedWing;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}